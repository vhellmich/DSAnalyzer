#ifndef CZECHPRINTINGHELPER_H_
#define CZECHPRINTINGHELPER_H_

#include <string>
#include <iostream>
#include "RateDataStructures.h"

// This was partly generated by AI copilot. For this task, I considered this as an apropriate use of AI, not cheating.

/// <summary>
/// Helps with printing Czech characters in UTF-8 format.
/// </summary>
class CzechPrintingHelper {
    // Function to calculate the display width of a UTF-8 string
 

public:
	void printJudgeData(const PresentingJudgeData& judge) {
        std::cout << pad_utf8_string(judge.name, 20)
            << pad_utf8_string(judge.surname, 30)
            << std::setw(10) << std::fixed << std::setprecision(2) << judge.rating * 100
            << std::setw(10) << judge.sampled << std::endl;
	}

	void printPairData(const PresentingPairData& pair) {
		std::cout << pad_utf8_string(pair.manName, 20)
			<< pad_utf8_string(pair.manSurname, 25)
			<< pad_utf8_string(pair.womanName, 20)
			<< pad_utf8_string(pair.womanSurname, 25)
			<< std::setw(10) << std::fixed << std::setprecision(2) << pair.rating * 100
			<< std::setw(10) << pair.sampled << std::endl;
	}

	void printClubData(const PresentingClubData& club) {
		std::cout << pad_utf8_string(club.name, 40)
			<< std::setw(10) << std::fixed << std::setprecision(2) << club.rating * 100
			<< std::setw(10) << club.sampled << std::endl;
	}

	void printClubHeader() {
		std::cout << pad_utf8_string("Name", 40)
			<< std::setw(10) << "Rating"
			<< std::setw(10) << "Sampled" << std::endl;
		std::cout << std::string(60, '-') << std::endl; // Separator line
	}

	void printJudgeHeader() {
		std::cout << pad_utf8_string("Name", 20)
			<< pad_utf8_string("Surname", 30)
			<< std::setw(10) << "Rating"
			<< std::setw(10) << "Sampled" << std::endl;
        std::cout << std::string(70, '-') << std::endl; // Separator line

	}

    void printPairHeader() {
        std::cout << std::left << std::setw(20) << "Man"
            << std::left << std::setw(25) << ""
            << std::left << std::setw(20) << "Woman"
            << std::left << std::setw(25) << ""
            << std::left << std::setw(10) << "Rating"
            << std::left << std::setw(10) << "Sampled" << std::endl;
        std::cout << std::string(110, '-') << std::endl; // Separator line
    }


    // Function to pad a UTF-8 string to a specific display width
    std::string pad_utf8_string(const std::string& str, size_t width) {
        size_t display_width = utf8_display_width(str);
        if (display_width >= width) {
            return str; // No padding needed
        }
        return str + std::string(width - display_width, ' ');
    }

private:
    size_t utf8_display_width(const std::string& str) {
        size_t width = 0;
        for (size_t i = 0; i < str.size();) {
            unsigned char c = str[i];
            if ((c & 0x80) == 0) {
                // Single-byte character (ASCII)
                ++width;
                ++i;
            }
            else if ((c & 0xE0) == 0xC0) {
                // Two-byte character
                ++width;
                i += 2;
            }
            else if ((c & 0xF0) == 0xE0) {
                // Three-byte character
                ++width;
                i += 3;
            }
            else if ((c & 0xF8) == 0xF0) {
                // Four-byte character
                ++width;
                i += 4;
            }
            else {
                // Invalid UTF-8 byte, skip it
                ++i;
            }
        }
        return width;
    }
};

#endif // !
